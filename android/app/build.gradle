// apply plugin: "com.android.application"
// apply plugin: "org.jetbrains.kotlin.android"
// apply plugin: "com.facebook.react"

// def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

// static def versionToNumber(major, minor, patch) {
//   return patch * 100 + minor * 10000 + major * 1000000
// }

// def getRNVersion() {
//   def version = providers.exec {
//     workingDir(projectDir)
//     commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
//   }.standardOutput.asText.get().trim()

//   def coreVersion = version.split("-")[0]
//   def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

//   return versionToNumber(
//       major,
//       minor,
//       patch
//   )
// }
// def rnVersion = getRNVersion()

// /**
//  * This is the configuration block to customize your React Native Android app.
//  * By default you don't need to apply any configuration, just uncomment the lines you need.
//  */
// react {
//     entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
//     reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
//     hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
//     codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

//     // Use Expo CLI to bundle the app, this ensures the Metro config
//     // works correctly with Expo projects.
//     cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
//     bundleCommand = "export:embed"

//     /* Folders */
//     //   The root of your project, i.e. where "package.json" lives. Default is '..'
//     // root = file("../")
//     //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
//     // reactNativeDir = file("../node_modules/react-native")
//     //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
//     // codegenDir = file("../node_modules/@react-native/codegen")

//     /* Variants */
//     //   The list of variants to that are debuggable. For those we're going to
//     //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
//     //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
//     // debuggableVariants = ["liteDebug", "prodDebug"]

//     /* Bundling */
//     //   A list containing the node command and its flags. Default is just 'node'.
//     // nodeExecutableAndArgs = ["node"]

//     //
//     //   The path to the CLI configuration file. Default is empty.
//     // bundleConfig = file(../rn-cli.config.js)
//     //
//     //   The name of the generated asset file containing your JS bundle
//     // bundleAssetName = "MyApplication.android.bundle"
//     //
//     //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
//     // entryFile = file("../js/MyApplication.android.js")
//     //
//     //   A list of extra flags to pass to the 'bundle' commands.
//     //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
//     // extraPackagerArgs = []

//     /* Hermes Commands */
//     //   The hermes compiler command to run. By default it is 'hermesc'
//     // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
//     //
//     //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
//     // hermesFlags = ["-O", "-output-source-map"]

//     if (rnVersion >= versionToNumber(0, 75, 0)) {
//         /* Autolinking */
//         autolinkLibrariesWithApp()
//     }
// }

// /**
//  * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
//  */
// def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

// /**
//  * The preferred build flavor of JavaScriptCore (JSC)
//  *
//  * For example, to use the international variant, you can use:
//  * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
//  *
//  * The international variant includes ICU i18n library and necessary data
//  * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
//  * give correct results when using with locales other than en-US. Note that
//  * this variant is about 6MiB larger per architecture than default.
//  */
// def jscFlavor = 'org.webkit:android-jsc:+'

// android {
//     ndkVersion rootProject.ext.ndkVersion

//     buildToolsVersion rootProject.ext.buildToolsVersion
//     compileSdk rootProject.ext.compileSdkVersion

//     namespace "com.startproject"
//     defaultConfig {
//         applicationId 'com.child.application'
//         minSdkVersion rootProject.ext.minSdkVersion
//         targetSdkVersion rootProject.ext.targetSdkVersion
//         versionCode 1
//         versionName "1.0.0"
//     }
//     signingConfigs {
//         debug {
//             storeFile file('debug.keystore')
//             storePassword 'android'
//             keyAlias 'androiddebugkey'
//             keyPassword 'android'
//         }
//     }
//     buildTypes {
//         debug {
//             signingConfig signingConfigs.debug
//         }
//         release {
//             // Caution! In production, you need to generate your own keystore file.
//             // see https://reactnative.dev/docs/signed-apk-android.
//             signingConfig signingConfigs.debug
//             shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
//             minifyEnabled enableProguardInReleaseBuilds
//             proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//             crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
//         }
//     }
//     packagingOptions {
//         jniLibs {
//             useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
//         }
//     }
// }

// // Apply static values from `gradle.properties` to the `android.packagingOptions`
// // Accepts values in comma delimited lists, example:
// // android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
// ["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
//     // Split option: 'foo,bar' -> ['foo', 'bar']
//     def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
//     // Trim all elements in place.
//     for (i in 0..<options.size()) options[i] = options[i].trim();
//     // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
//     options -= ""

//     if (options.length > 0) {
//         println "android.packagingOptions.$prop += $options ($options.length)"
//         // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
//         options.each {
//             android.packagingOptions[prop] += it
//         }
//     }
// }

// dependencies {
//     // The version of react-native is set by the React Native Gradle Plugin
//     implementation("com.facebook.react:react-android")

//     def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
//     def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
//     def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

//     if (isGifEnabled) {
//         // For animated gif support
//         implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
//     }

//     if (isWebpEnabled) {
//         // For webp support
//         implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
//         if (isWebpAnimatedEnabled) {
//             // Animated webp support
//             implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
//         }
//     }

//     if (hermesEnabled.toBoolean()) {
//         implementation("com.facebook.react:hermes-android")
//     } else {
//         implementation jscFlavor
//     }
// }

// if (rnVersion < versionToNumber(0, 75, 0)) {
//     apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
//     applyNativeModulesAppBuildGradle(project)
// }




plugins {
    id 'com.android.application'
    id 'com.chaquo.python'
}

import com.android.build.OutputFile

android {
    namespace 'com.child.application'
    compileSdk = 34
    defaultConfig {
        applicationId "com.child.application"
        minSdk = 21
        targetSdk = 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        python {
            version "3.8"
            buildPython "C:\\Users\\TOMAS\\AppData\\Local\\Programs\\Python\\Python38\\python.exe"
            pip {
                install "six"
                install "scipy"
                install "numpy"
                install "opencv-contrib-python-headless"
                // install "Keras==2.3.1"
                install "tensorflow"
                install "pillow"
            }
            sourceSets {
                main {
                    python.srcDir "src/main/python"
                }
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    chaquopy {
        defaultConfig {
            version = "3.8"  // Specify Python version 3.12.4
            pip {
                // install("sqlite3")
                // install("numpy")
                // Add more packages as needed
            }
            pyc {
                src = true  // Enable bytecode compilation for local source
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    testImplementation 'androidx.arch.core:core-testing:2.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
